package com.contactura.contactura.controller;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.contactura.contactura.model.Contactura;
import com.contactura.contactura.model.ContacturaUser;
import com.contactura.contactura.repository.ContacturaUserRepository;

@RestController
@RequestMapping({ "/user" })
public class ContacturaUserController {

	@Autowired
	private ContacturaUserRepository repository; // http://localhost:8090/contacturauser

	// List All - http://localhost:8090/contacturauser
	@GetMapping
	public List<ContacturaUser> findAll() {
		return repository.findAll();
	}

	// Find By Id - http://localhost:8090/contacturauser/{id}
	@GetMapping(value = "{id}")
	public ResponseEntity<?> findById(@PathVariable Long id) {
		return repository.findById(id)
				.map(record -> ResponseEntity.ok().body(record))
				.orElse(ResponseEntity.notFound().build());
	}

	// Create - http://localhost:8090/contacturauser
	@PostMapping
	public ContacturaUser create(@RequestBody ContacturaUser user) {
		return repository.save(user);
	}

	// Update - http://localhost:8090/contactura/{id}
	@PutMapping(value = "{id}")
	public ResponseEntity<?> update(@PathVariable long id
			, @RequestBody ContacturaUser user) {
		return repository.findById(id)
				.map(record -> {
			record.setName(user.getName());
			record.setPassword(user.getPassword());
			record.setUsername(user.getUsername());
			record.setAdmin(user.isAdmin());
			ContacturaUser update = repository.save(record);
			return ResponseEntity.ok().body(update);
		}).orElse(ResponseEntity.notFound().build());
	}

	// Delete - http://localhost:8090/contacturauser/{id}

	@DeleteMapping(path = "{id}")
	public ResponseEntity<?> delete(@PathVariable long id) {
		return repository.findById(id).map(record -> {
			repository.deleteById(id);
			return ResponseEntity.ok().build();
		}).orElse(ResponseEntity.notFound().build());
	}
}
